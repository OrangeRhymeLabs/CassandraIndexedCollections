Indexed Collections for Cassandra

This is an implementation of the indexing technique described here:

http://www.anuff.com/2010/07/secondary-indexes-in-cassandra.html

This requires Hector, the Java client for Cassandra (https://github.com/rantav/hector), to run.

It also uses Cassandra Composite Types (https://github.com/edanuff/CassandraCompositeType) and
requires that the CompositeType comparer be installed in the running Cassandra instance.

This is a simplified version of a more complex indexing scheme thats been in used
for some time now as part of a large project.  However, this simplified implementation was
largely created from scratch and hasn't been extensively tested.

-------------------------------------------------------------------------------
Note:

The composite comparer used here will be superceded by the compositee type
proposed in https://issues.apache.org/jira/browse/CASSANDRA-2231 and will
hopefully be present at some point at or after the release of 0.7.4.
Once that has been built into Cassandra, the recommended approach will
be to use the new DynamicCompositeType comparer and this example will be updated
to reflect that.

The index-building techniques described here will still be applicable
though and should be used in place of SupercColumn-based approaches and,
once support for composite-based indexes are incorporated into the major
client libraries, will often be preferable to the built-in secondary
indexes as well.
-------------------------------------------------------------------------------

